export default {
    en: {
      title: "Use AI to summarize the ghost",
      idea: "Use gemini to summarize the ghost and read it aloud",
      date: "01/25",
      keywords: "Gemini/MongoDB/Lambda/FFmpeg/GoogleTTS",
      source: "github/break/https://www.youtube.com/watch?v=HRmtiNFDMp8&t=1s/break/https://whatsghost.xyz/",
      paragraph_1: "Initially, I planned to use gemini to summarize from YouTube clips, but the result was that it didn't make sense and consumed a lot of tokens. So I switched to pulling auto-generate captions from the YouTube video as text and sending it to gemini for summarization. The summary improved significantly and saved 99% of the tokens.",
      image_1: "/img/whatsghost_1.png",
      paragraph_2: "Then, I sent the summary to Google Text-to-Speech, but I had to split the text into chunks because this service only accepts text files of limited size. We get audio files according to the number of chunks and combine them into one large file.",
      paragraph_3: "I combined it into a video using the ffmpeg library along with the thumbnail image obtained from the YouTube video.",
      image_2: "/img/whatsghost_2.png",
      paragraph_4: "I stored the video and audio files in AWS S3, inserted metadata into MongoDB, and deployed a Lambda function to query MongoDB so that it can be accessed from the website. That's it!",
    },
    th: {
      title: "ใช้ AI สรุปเรื่องย่อ the ghost",
      idea: "ใช้ gemini สรุปเรื่องย่อ the ghost และอ่านให้ฟัง",
      date: "01/25",
      keywords: "Gemini/MongoDB/Lambda/FFmpeg/GoogleTTS",
      source: "github/break/https://www.youtube.com/watch?v=HRmtiNFDMp8&t=1s/break/https://whatsghost.xyz/",
      paragraph_1: "ตอนแรก ผมกะจะใช้ gemini สรุปจากคลิปยูทูป แต่ผลคือ มันสรุปไม่รู้เรื่องแถมกิน token เยอะมาก จึงเปลี่ยนเป็นดึง auto generate caption จาก youtube video มาเป็น text ส่งให้กับ gemini เพื่อให้มันสรุปเรื่องย่อให้ พบว่าสรุปดีขึ้นและยังประหยัด token ไป 99%",
      image_1: "/img/whatsghost_1.png",
      paragraph_2: "จากนั้นส่งสรุปที่ได้ให้ google text2speech โดยต้องทำการแบ่ง text เป็น chunk เพราะ service นี้รับแค่ไฟล์ text ขนาดจำกัด  เราจะได้ไฟล์เสียงตามจำนวน chunk ให้นำมารวมกันเป็นไฟล์ใหญ่ไฟล์เดียว",
      paragraph_3: "ประกอบรวมเป็น video โดยใช้ ffmpeg library รวมกับภาพ thumbnail ที่ได้จาก youtube video",
      image_2: "/img/whatsghost_2.png",
      paragraph_4: "ฝากไฟล์วิดิโอและไฟล์เสียงไว้ที่ AWS s3, insert metadat เข้า mongo db, deploy lambda function สำหรับ query mongodb เพื่อให้สามารถเรียกดูได้จากหน้าเว็บ เท่านี้ก็เรียบร้อยแล้วครับ",
    },
  }